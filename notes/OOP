@author: mateus levi souza
------- xxxx xx xxx xxxxxx


What is the pillar of oops concept -------------------------
* encapsulation: means binding all fields as a single entry. 
define some rules. you need to define all the attributes as
private and use all public exposed method which is GETTER &
SETTER method

*inheritance: we use to reuse all the property of parent in 
our child 
class -> interface implements 
class -> class extends 
interface -> interface implements 

*polymorphism: single with multiple implementation, basically 
overloading and overriding 

*abstraction: hidden the implementation to the end user give 
them only the functionally 

where did you use this concepts in you project
==============

- we use *encapsulation* in real time in one of our domain or
dto classes.
whoever want to access this item he need to create the object
of it and he needs to call this.

- *inheritance* 
service -> serviceImpl

- *polymorphism* 
overloading: having the same method signature but the argument
is different. 

public Item addItem(item item);
public Item addItem(List<Item> item);

overriding: its means we're just accessing the property of our
parent. so overriding always happen in different class if that
those class have the inheritance. purpose of using this overriding
to reuse the property.

public class A{}
public class B extends A{}
real time polymorphism

@Override
public A addItem(Item item) {
	return null
}

@Override
public B addItem(Item item) {
	return null
}

because B is a subclass of A. this is one of the tricky scenario
you can find in the interview. so in the implementation you can
return child object of it.

- "If you're returning any parent object as a return type in you interface or class then in your implementation you can return child object of it"

back to the controller you can inject the interface right. that's 
what the dynamic polymorphism or run time polymorphism. 

@Override
private UserService service;

-> now we have only service IMPL 1 on i can have IMPL 2. <-

explain exception hierarchy in inheritance  
==============

if my parent class throws some exception, is it 
mandatory that my child need to handle this? 
- "No. Note if parent is throwing the exception then it is optional for child."

- no. if you go to this clild there is no compilation error even 
though (embora) parent is throwing the exception. so i can add the 
exception or not. 
- if my child is throwing the exception my parent must need throw it
too

parent child overriding scenario
==============

is also one tricky question we can consider. 
if we override the method and create the object of parent new child
and call the method. this m method will call from the parent class 

public class Child extends Parent {
	@Override
	public void m1() {
		System.out.println("child m1")
	}
	
	public static void main (String[] args) {
		Parent parent = new Child;
		parent.m1();
	}
}

people are assuming that this is the object of you parent class
the output will be

		child m1
		
is executing from our child class because we override it from the 
parent. with the reference of parent we are creating the object of
child that's whu we are able to access this method from the child 
class. so lets assume i did not override 
if we run it now 

		parent m1()
		
thats what the override and or we can say run time polymorphism.

can we override static and private method?
==============

- No. We cannot override static and private method. 
if something is common for all the implementation better to keep that
as a static in your interface



Objects
==============

Real world objects. they have two major components: state and behavior.
for an ant, the state might be.

Constructor
==============

A constructor is used in the creation of an object. Thats is a instance of
a class. 
You never include a return type from a constructor, not even void. You should
specify an appropriate access modifier, to control who should be able to create 
new instances of the class.
Default constructor is generate during the compilation process 

- if a class contains any other constructor declarations, then a default 
constructor is NOT implicitly declared. 

Record
==============

generated code that java provides. 
public record LPAStudent(String id, String name, String classList) {}

- the field is declared private and final.

POJO vs. Record 

- if you want to modify data on your class, you won´t be using the record. 
- if you're reading a whole lot of records, from a database or file source,
and simply passing this data around, then the record is a big improvement. 

Which is good to store password in java string or char[]?
- since strings are immutable in java if you store the password as plain text 
it will be available in memory until the Garbage Collector clears it and also
string literal is stored string pool for reusability there is a pretty high 
chance that it will remain in memory for long duration 
- its difficult to destroy literal from SCP as GC unable to perfom cleanup
activity in SCP only it will destroy once jvm restarted 
- sicne anyone who has access to memory dump can find the password

List()
==============

represent an sequenced or ordered group of elements.
- Elements in List can be inserted, updated, or retrieved by their position or 
index. Index or position value starts from 0
LinkedList examples 

Set()
==============

A set represents a group or collection of items. Set has a special property that 
is unique items, it can not contain a duplicate item or element. It extends the 
collection interface.

Map()
==============

A map in java, not extends the Collection interface. It represents a group of special 
elements or objects. Every map element or object contains key and value pair. A map 
can’t contain duplicate keys and one key can refer to at most one value.


    Use Set: If you need group of unique elements.
    Use List: If get operations are higher than any other operation.
    Use Map: If objects contains the key and value pair.

List               Set              Map

ArrayList    HashSet             hashMap
LisnkedList  LinkedHahSeh        LinkedHashMap
             TreeSet             TreeMap
CopyOnWriteArrayList    CopyOnWriteArraySet          ConcurrentHashMap

Difference between list and set
- List will allow us to duplicate elements
- set will not allowed to store duplicate objects
- list works on index base where set works on based on the hash
- access the element using the index list and set is used to design a collection
of distant element.

Difference between ArrayList and LinkedList
impl of the list interface
- arrayList used a dynamic array to store the elements, linked internally uses a
doubly linked to store the elements
- manipulation with linked is faster that arrayList 'cause it uses a doubly linked
list, no bit shifting is required in memory
linked list is better for manipulating data, arrays is better to storing and accessing data
Linked already maintain the node reference of previous and next

ArraysList arrList = new ArraList<String>(); -> directly using the ArrayList impl

ArrayList<String> str = new ArrayList<>(); -> using the interface, dynamic poly, ref of a list

final field in List, set, map...
- even though we declare it is final we can modify it thereisnt immutable
still can modify but we cannot reassing this list, cannot create another
object, but can modify, adding elements

- if you are using set with any primitive then its fine you dont need to override equals and hash
but you must with wrapers and customObject


